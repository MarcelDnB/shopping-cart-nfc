package vertxMain;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Promise;
import io.vertx.core.json.Json;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;
import io.vertx.mysqlclient.MySQLClient;
import io.vertx.mysqlclient.MySQLConnectOptions;
import io.vertx.mysqlclient.MySQLPool;
import io.vertx.sqlclient.PoolOptions;
import io.vertx.sqlclient.Row;
import io.vertx.sqlclient.RowSet;
import io.vertx.sqlclient.Tuple;
import types.productosUsuario;
import types.scannedProduct;
import types.wifiReading;

public class DatabaseVerticle extends AbstractVerticle{

	
	private MySQLPool mySQLPool;
	
	@Override
	public void start(Promise<Void> startPromise) {
		MySQLConnectOptions mySQLConnectOptions = new MySQLConnectOptions().setPort(3306).setHost("localhost")
				.setDatabase("DAD").setUser("dad").setPassword("dnbmusic");
		PoolOptions poolOptions = new PoolOptions().setMaxSize(5);
		mySQLPool = MySQLPool.pool(vertx, mySQLConnectOptions, poolOptions);
		Router router = Router.router(vertx);
		router.route().handler(BodyHandler.create());
		vertx.createHttpServer().requestHandler(router::handle).listen(8081, result -> {
			if (result.succeeded()) {
				startPromise.complete();
			}else {
				startPromise.fail(result.cause());
			}
		});
		
		router.put("/api/scan/put/wifi/values").handler(this::putWifiScan);
		//router.get("/api/scan/:idProducto/").handler(this::getIntolerances);
		//router.put("/api/scan/put/produs/values").handler(this::putAfterScan);
		
		
	}
	
	private void putAfterScan(RoutingContext routingContext) {
		productosUsuario productoUsuario = Json.decodeValue(routingContext.getBodyAsString(), productosUsuario.class);
		mySQLPool.preparedQuery(
				"INSERT INTO productosUsuario (idProducto, idUsuario) VALUES (?,?)",
				Tuple.of(productoUsuario.getIdProducto(), productoUsuario.getIdUsuario()),
				handler -> {
					if (handler.succeeded()) {
						System.out.println(handler.result().rowCount());
						
						long id = handler.result().property(MySQLClient.LAST_INSERTED_ID);
						productoUsuario.setIdProductosUsuario((int) id);
						
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(JsonObject.mapFrom(productoUsuario).encodePrettily());
					} else {
						System.out.println(handler.cause().toString());
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
								.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
	}
	
	private void putWifiScan(RoutingContext routingContext) {
		wifiReading wifiReading = Json.decodeValue(routingContext.getBodyAsString(), wifiReading.class);
		System.out.println(",is muertossdsdsdsdsd");
		mySQLPool.preparedQuery(
				"INSERT INTO redeswifi (SSID, PWR, captureTime, idComercio) VALUES (?,?,?,?)",
				Tuple.of(wifiReading.getSSID(), wifiReading.getPower(),
						wifiReading.getTimestamp(),wifiReading.getIdComercio()),
				handler -> {
					if (handler.succeeded()) {
						System.out.println(handler.result().rowCount());
						
						long id = handler.result().property(MySQLClient.LAST_INSERTED_ID);
						wifiReading.setIdWifi((int) id);
						
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(JsonObject.mapFrom(wifiReading).encodePrettily());
					} else {
						System.out.println(handler.cause().toString());
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
								.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
	}
	
	
	
	private void getIntolerances(RoutingContext routingContext) {
		mySQLPool.query("select idIntolerancia from intolerancia natural join ingrediente natural"
				+ " join ingredientesproducto natural join producto where IdProducto = " + 
				routingContext.request().getParam("idProducto"),
				res -> {
					if (res.succeeded()) {
						RowSet<Row> resultSet = res.result();
						System.out.println("El número de elementos obtenidos es " + resultSet.size());
						JsonArray result = new JsonArray();
						for (Row row : resultSet) {
							result.add(JsonObject.mapFrom(new scannedProduct(row.getInteger("idIntolerancia")
									)));
						}
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
							.end(result.encodePrettily());
					}else {
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
					}
				});
	}
	
	
	
	
}